// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  username   String     @unique
  password   String
  posts      Post[]
  comments   Comment[]
  categories Category[]
  tags       Tag[]
  role       String     @default("user")
}

model Post {
  id         String         @id @default(uuid())
  title      String
  text       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  comments   Comment[]
  categories PostCategory[]
  tags       Tag[]
  publish    Boolean        @default(true)
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Category {
  id     String         @id @default(uuid())
  title  String         @unique
  posts  PostCategory[]
  User   User           @relation(fields: [userId], references: [id])
  userId String
}

model Tag {
  id     String  @id @default(uuid())
  title  String  @unique
  posts  Post[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model PostCategory {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([categoryId, postId])
  @@unique([categoryId, postId])
}
